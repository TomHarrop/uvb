#!/bin/bash

set -e

# catch email address (-e) and password (-p) for jgi passed to bash script
# if the jgi password has special characters this script won't work

while [ "$1" != "" ]; do
	case $1 in
		-e )	shift
				jgi_logon=$1
				;;
		-p )	shift
				jgi_password=$1
				;;
		-s )	shift
				species=$1
				;;
		-g )	shift
				genome_url=$1
				;;
		-a )	shift
				annotation_url=$1
				;;
		* )		echo "Bad input"
				exit 1
	esac
	shift
done


# bash traceback code from https://docwhat.org/tracebacks-in-bash/
_showed_traceback=f

_exit_trap () {
  local _ec="$?"
  if [[ $_ec != 0 && "${_showed_traceback}" != t ]]; then
    traceback 1
  fi
}

_err_trap() {
  local _ec="$?"
  local _cmd="${BASH_COMMAND:-unknown}"
  traceback 1
  _showed_traceback=t
  echo "The command ${_cmd} exited with exit code ${_ec}." 1>&2
}

traceback() {
  # Hide the traceback() call.
  local -i start=$(( ${1:-0} + 1 ))
  local -i end=${#BASH_SOURCE[@]}
  local -i i=0
  local -i j=0

  echo "Traceback (last called is first):" 1>&2
  for ((i=${start}; i < ${end}; i++)); do
    j=$(( $i - 1 ))
    local function="${FUNCNAME[$i]}"
    local file="${BASH_SOURCE[$i]}"
    local line="${BASH_LINENO[$j]}"
    echo "     ${function}() in ${file}:${line}" 1>&2
  done
}

# traps
trap _err_trap SIGHUP SIGINT SIGTERM
trap _exit_trap EXIT
trap _err_trap ERR

# handle waiting
FAIL=0
fail_wait() {
for job in $(jobs -p); do
  wait $job || let "FAIL+=1"
done
if [[ ! "$FAIL" == 0 ]]; then
  exit 1
fi
}

# how many CPUs we got?
if [[ $SLURM_JOB_CPUS_PER_NODE ]]; then
  maxCpus="$SLURM_JOB_CPUS_PER_NODE"
  echo -e "[ "$(date)": ${0} running with "$maxCpus" CPUs ]"
else
  maxCpus=1
fi

set -u

# CODE STARTS HERE -------------------------------------------------------------

# set up a phytozome cookie
jgi_cookies=(/tmp/jgi_cookie.*)
if [[ -e ${jgi_cookies[0]} ]]; then
	# use a previous cookie in /tmp
	jgi_cookie=${jgi_cookies[0]}
else
	# or get a new cookie from phytozome
	jgi_cookie=$(mktemp /tmp/jgi_cookie.XXXXXXXXXX)
	echo -e "[ "$(date)": Signing on to phytozome at JGI ]"
	curl https://signon.jgi.doe.gov/signon/create --data-ascii \
	login="$jgi_logon"\&password="$jgi_password" \
	-b "$jgi_cookie" -c "$jgi_cookie" > /dev/null
fi

echo $jgi_cookie

# make a directory for the output
genome_dir="data/genome/"$species""
if [ ! -d $genome_dir ]; then
	mkdir -p $genome_dir
fi

# download the genome
genome_file="$(basename $genome_url .fa.gz)"
cat <<- _EOF_
	[ $(date): Downloading genome fasta ]
	$genome_url
_EOF_
curl $genome_url -b "$jgi_cookie" -c "$jgi_cookie" > \
	"$genome_dir"/"$genome_file".fa.gz \
	&& gunzip "$genome_dir"/"$genome_file".fa.gz

# download the annotation
annotation_file="$(basename $annotation_url .gff3.gz)"
cat <<- _EOF_
	[ $(date): Downloading annotation file ]
	$annotation_url
_EOF_
curl $annotation_url -b "$jgi_cookie" -c "$jgi_cookie" > \
	"$genome_dir"/"$annotation_file".gff3.gz \
	&& gunzip "$genome_dir"/"$annotation_file".gff3.gz

# make cuffcomp gtf
echo -e "[ "$(date)": Making GTF file with cuffcompare ]"
cuffcompare -s "$genome_dir"/"$genome_file".fa -CG \
	-r "$genome_dir"/"$annotation_file".gff3 \
	-o "$genome_dir"/"$annotation_file".cuffcomp \
	"$genome_dir"/"$annotation_file".gff3

# remove Chr9 rRNA 'genes' from rice GTF, stash the GTF and remove cuffcomp
# intermediates
if [[ "$species" == "os" ]]; then
	echo -e "[ "$(date)": Removing rRNA 'genes' from os GTF ]"
	# output to .tmp file to stash processed GTF
	sed '/LOC_Os09g01000/d' \
		"$genome_dir"/"$annotation_file".cuffcomp.combined.gtf \
		| sed '/LOC_Os09g00999/d' > "$genome_dir"/gtf_final.tmp
	rm "$genome_dir"/*cuffcomp*
	mv "$genome_dir"/gtf_final.tmp \
		"$genome_dir"/"$annotation_file".cuffcomp.rRNAremoved.gtf
else
	# stash unprocessed GTF
	mv "$genome_dir"/"$annotation_file".cuffcomp.combined.gtf \
		"$genome_dir"/gtf_final.tmp
	rm "$genome_dir"/*cuffcomp*
	mv "$genome_dir"/gtf_final.tmp \
		"$genome_dir"/"$annotation_file".cuffcomp.gtf
fi

# remove cuffcomp intermediates then unstash gtf

# log metadata
cat -t <<- _EOF_ > "$genome_dir"/METADATA.csv
	script,${0}
	branch,$(git rev-parse --abbrev-ref HEAD)
	hash,$(git rev-parse HEAD)
	date,$(date +%F)
	cuffcomp version,$(cuffcompare -h 2>&1 | head -n 1)
_EOF_

exit 0
