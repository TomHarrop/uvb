#!/bin/bash

set -e

# catch email address (-e) and password (-p) for jgi passed to bash script
# if the jgi password has special characters this script won't work

while [ "$1" != "" ]; do
	case $1 in
		-e )	shift
				jgi_logon=$1
				;;
		-p )	shift
				jgi_password=$1
				;;
		-s )	shift
				species=$1
				;;
		-g )	shift
				genome_url=$1
				;;
		-a )	shift
				annotation_url=$1
				;;
		* )		echo "Bad input"
				exit 1
	esac
	shift
done

cat <<- _EOF_
Caught arguments from CLI:
jgi_logon = $jgi_logon
jgi_password = $jgi_password
species = $species
genome_url = $genome_url
annotation_url = $annotation_url
_EOF_

# set up a phytozome cookie
jgi_cookies=(/tmp/jgi_cookie.*)
if [[ -e ${jgi_cookies[0]} ]]; then
	# use a previous cookie in /tmp
	jgi_cookie=${jgi_cookies[0]}
else
	# or get a new cookie from phytozome
	jgi_cookie=$(mktemp /tmp/jgi_cookie.XXXXXXXXXX)
	echo -e "[ "$(date)": Signing on to phytozome at JGI ]"
	curl https://signon.jgi.doe.gov/signon/create --data-ascii \
	login="$jgi_logon"\&password="$jgi_password" \
	-b "$jgi_cookie" -c "$jgi_cookie" > /dev/null
fi

echo $jgi_cookie

# make a directory for the output
genome_dir="data/genome/"$species""
if [ ! -d $genome_dir ]; then
	mkdir -p $genome_dir
fi

# download the genome
genome_file="$(basename $genome_url .fa.gz)"
cat <<- _EOF_
	[ $(date): Downloading genome fasta ]
	$genome_url
_EOF_
curl $genome_url -b "$jgi_cookie" -c "$jgi_cookie" > \
	"$genome_dir"/"$genome_file".fa.gz

# download the annotation
annotation_file="$(basename $annotation_url .gff3.gz)"
cat <<- _EOF_
	[ $(date): Downloading annotation file ]
	$annotation_url
_EOF_
curl $annotation_url -b "$jgi_cookie" -c "$jgi_cookie" > \
	"$genome_dir"/"$annotation_file".gff3.gz

exit 0



# # make sure the file was downloaded
# if [[ ! -s "$genome_dir"/"$genome_file.fa.gz" ]]; then
# 	echo -e "[ "$(date)": ERROR: download failed, check password? ]"
# 	exit 1
# fi

# cat <<- _EOF_
# 	[ $(date): Downloading annotation ]
# 	$annot_url
# _EOF_
# curl $annot_url -b "$genome_dir"/cookies -c "$genome_dir"/cookies > $genome_dir/$annotation_file.gff3.gz

# echo -e "[ "$(date)": Unzipping downloads ]"
# gunzip $genome_dir/$genome_file.fa.gz
# gunzip $genome_dir/$annotation_file.gff3.gz

# rm "$genome_dir"/cookies

# # make cuffcomp gtf
# echo -e "[ "$(date)": Making GTF file with cuffcompare ]"
# cuffcompare -s $genome_dir/$genome_file.fa -CG -r $genome_dir/$annotation_file.gff3 \
# 	-o $genome_dir/$annotation_file.cuffcomp $genome_dir/$annotation_file.gff3

# # remove Chr9 rRNA 'genes'
# sed '/LOC_Os09g01000/d' $genome_dir/$annotation_file.cuffcomp.combined.gtf \
# 	| sed '/LOC_Os09g00999/d' \
# 	> $genome_dir/gtf_final.tmp

# # remove cuffcomp intermediates
# rm $genome_dir/*cuffcomp*
# mv $genome_dir/gtf_final.tmp $genome_dir/$annotation_file.cuffcomp.rRNAremoved.gtf

# # download MSU annotations file
# annotationsUrl="ftp://ftp.plantbiology.msu.edu/pub/data/Eukaryotic_Projects/o_sativa/annotation_dbs/pseudomolecules/version_7.0/all.dir/all.locus_brief_info.7.0"
# annotationsFile="$(basename $annotationsUrl).tab"
# cat <<- _EOF_
# 	[ $(date): Downloading MSU gene function annotations ]
# 	$genome_url
# _EOF_
# curl $annotationsUrl > "$genome_dir"/"$annotationsFile"

# # log metadata
# cat -t <<- _EOF_ > $genome_dir/METADATA.csv
# 	script,${0}
# 	branch,$(git rev-parse --abbrev-ref HEAD)
# 	hash,$(git rev-parse HEAD)
# 	date,$(date +%F)
# 	cuffcomp version,$(cuffcompare -h 2>&1 | head -n 1)
# _EOF_

# exit 0