#!/bin/bash

set -e

# catch species
while [ "$1" != "" ]; do
	case $1 in
		-s )	shift
				species=$1
				;;
		* )		echo "Bad input"
				exit 1
	esac
	shift
done


# how many CPUs we got?
if [[ $SLURM_JOB_CPUS_PER_NODE ]]; then
	maxCpus="$SLURM_JOB_CPUS_PER_NODE"
	echo -e "[ "$(date)": Running STAR with "$maxCpus" CPUs ]"
else
	maxCpus=1
fi
let "ram_limit = $maxCpus * 3000000000"
echo -e "[ "$(date)": Allocating $(($ram_limit/1000000000)) GB RAM ]"

# cleanup functions
exit_error() {
	echo -e "[ "$(date)": Script aborted ]"
	exit 1
}

# catch exit codes
trap_exit() {
	exitCode=$?
	if (( "exitCode" == 0 )) ; then
		exit 0
	else
		exit_error
	fi
}

# traps
trap exit_error SIGHUP SIGINT SIGTERM
trap trap_exit EXIT

# handle waiting
FAIL=0
fail_wait() {
for job in $(jobs -p); do
  wait $job || let "FAIL+=1"
done
if [[ ! "$FAIL" == 0 ]]; then
  exit 1
fi
}

set -u

# CODE STARTS HERE -------------------------------------------------------------

echo -e "[ "$(date)": Genome generation with STAR for "$species" ]"

# make output directory
outdir="output/"$species"/star-index"
if [[ ! -d $outdir ]]; then
	mkdir -p $outdir
fi

# set parameters
genomeFastaFiles=(data/genome/"$species"/*.fa)
sjdbGTFfile=(data/genome/"$species"/*.gtf)
sjdbOverhang=99
outFileNamePrefix="$outdir/"

if [[ ! ${#genomeFastaFiles[@]} -eq 1 || ! ${#sjdbGTFfile[@]} -eq 1 ]]; then
	echo -e "[ "$(date)": ERROR. Check GTF and genome files. Exiting ]"
	exit 0
fi

cat <<- _EOF_
	[ $(date): Submitting job ]
	              genomeFastaFiles: ${genomeFastaFiles[@]}
	                   sjdbGTFfile: ${sjdbGTFfile[@]}
	                  sjdbOverhang: $sjdbOverhang
_EOF_

FAIL=0
cmd="STAR --runThreadN "$maxCpus" --limitGenomeGenerateRAM "$ram_limit" \
	--runMode genomeGenerate --genomeDir $outdir \
	--genomeFastaFiles $genomeFastaFiles --sjdbGTFfile $sjdbGTFfile \
	--sjdbOverhang $sjdbOverhang --outFileNamePrefix $outFileNamePrefix"
srun --output "$outdir"/stargg.out --exclusive --ntasks=1 \
	--cpus-per-task="$maxCpus" --mem-per-cpu=3000 $cmd &

echo -e "[ "$(date)": Waiting for jobs to finish ]"
fail_wait

# log metadata
version="$(STAR --version)"
cat -t <<- _EOF_ > $outdir/METADATA.csv
	Script,${0}
	branch,$(git rev-parse --abbrev-ref HEAD)
	hash,$(git rev-parse HEAD)
	date,$(date +%F)
	STAR version,$version
	genomeFastaFiles,$genomeFastaFiles
	sjdbGTFfile,$sjdbGTFfile
	sjdbOverhang,$sjdbOverhang
_EOF_
echo -e "[ "$(date)": Jobs finished, exiting ]"

exit 0